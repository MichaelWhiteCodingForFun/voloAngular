/*
Deployment script for POD2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "POD2"
:setvar DefaultFilePrefix "POD2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[AccountStatus]...';


GO
CREATE TABLE [dbo].[AccountStatus] (
    [ID]       UNIQUEIDENTIFIER NOT NULL,
    [StatusID] SMALLINT         NOT NULL,
    [Status]   NVARCHAR (50)    NOT NULL
);


GO
PRINT N'Creating [dbo].[Organization]...';


GO
CREATE TABLE [dbo].[Organization] (
    [ID]                   UNIQUEIDENTIFIER NOT NULL,
    [OrganizationName]     NVARCHAR (50)    NOT NULL,
    [CreatedByID]          UNIQUEIDENTIFIER NOT NULL,
    [CreatedDateUtc]       DATETIME         NOT NULL,
    [IsActive]             BIT              NOT NULL,
    [AccountNumber]        NVARCHAR (50)    NULL,
    [AccountName]          NVARCHAR (50)    NULL,
    [OrganizationTypeID]   INT              NULL,
    [ParentOrganizationID] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[OrganizationType]...';


GO
CREATE TABLE [dbo].[OrganizationType] (
    [ID]                   UNIQUEIDENTIFIER NOT NULL,
    [OrganizationTypeName] NVARCHAR (50)    NOT NULL,
    [OrganizationTypeID]   INT              NULL,
    CONSTRAINT [PK_OrganizationType] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Report]...';


GO
CREATE TABLE [dbo].[Report] (
    [ID]             UNIQUEIDENTIFIER NOT NULL,
    [ReportTypeID]   INT              NOT NULL,
    [CreatedDateUtc] DATETIME         NOT NULL,
    [Details]        NVARCHAR (250)   NOT NULL,
    [UserID]         UNIQUEIDENTIFIER NOT NULL,
    [IsSuccess]      BIT              NULL,
    [TicketID]       UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Report_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReportType]...';


GO
CREATE TABLE [dbo].[ReportType] (
    [ID]             UNIQUEIDENTIFIER NOT NULL,
    [ReportTypeName] NVARCHAR (50)    NOT NULL,
    [ReportTypeID]   INT              NOT NULL,
    CONSTRAINT [PK_ReportType] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [ID]          UNIQUEIDENTIFIER NOT NULL,
    [RoleName]    NVARCHAR (50)    NOT NULL,
    [Description] NVARCHAR (250)   NULL,
    [IsAdmin]     BIT              NULL,
    CONSTRAINT [PK_Role_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Ticket]...';


GO
CREATE TABLE [dbo].[Ticket] (
    [ID]             UNIQUEIDENTIFIER NOT NULL,
    [OrganizationID] UNIQUEIDENTIFIER NOT NULL,
    [SerialNumber]   VARCHAR (50)     NOT NULL,
    [TicketNumber]   INT              NOT NULL,
    [Plant]          VARCHAR (10)     NULL,
    [DeliveryDate]   DATETIME         NULL,
    [HaulierCode]    VARCHAR (10)     NULL,
    [HaulierReg]     VARCHAR (10)     NULL,
    [QuoteNumber]    VARCHAR (20)     NULL,
    [InvoiceNumber]  VARCHAR (20)     NULL,
    [PayerAccount]   VARCHAR (10)     NULL,
    [DeletionInd]    VARCHAR (2)      NULL,
    CONSTRAINT [PK_Ticket] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [ID]                UNIQUEIDENTIFIER NOT NULL,
    [UserName]          NVARCHAR (250)   NOT NULL,
    [FullName]          NVARCHAR (250)   NOT NULL,
    [IsActive]          BIT              NOT NULL,
    [CreatedDateUtc]    DATETIME         NOT NULL,
    [SecurityStamp]     NVARCHAR (500)   NULL,
    [LockoutEnabled]    BIT              NOT NULL,
    [AccessFailedCount] INT              NOT NULL,
    [LockoutEndDateUtc] DATETIME         NULL,
    [PasswordHash]      NVARCHAR (250)   NULL,
    [CreatedByID]       UNIQUEIDENTIFIER NOT NULL,
    [LastLoginDate]     DATETIME         NULL,
    [StatusID]          SMALLINT         NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[UserOrganization]...';


GO
CREATE TABLE [dbo].[UserOrganization] (
    [ID]             UNIQUEIDENTIFIER NOT NULL,
    [UserID]         UNIQUEIDENTIFIER NOT NULL,
    [OrganizationID] UNIQUEIDENTIFIER NOT NULL,
    [IsActive]       BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [ID]        UNIQUEIDENTIFIER NOT NULL,
    [RoleID]    UNIQUEIDENTIFIER NOT NULL,
    [UserID]    UNIQUEIDENTIFIER NOT NULL,
    [IsPrimary] BIT              NULL,
    [IsActive]  BIT              NULL,
    CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Ticket_Organization]...';


GO
ALTER TABLE [dbo].[Ticket]
    ADD CONSTRAINT [FK_Ticket_Organization] FOREIGN KEY ([OrganizationID]) REFERENCES [dbo].[Organization] ([ID]);


GO
PRINT N'Creating [dbo].[FK_User_User]...';


GO
ALTER TABLE [dbo].[User]
    ADD CONSTRAINT [FK_User_User] FOREIGN KEY ([ID]) REFERENCES [dbo].[User] ([ID]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Role]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [FK_UserRole_Role] FOREIGN KEY ([RoleID]) REFERENCES [dbo].[Role] ([ID]);


GO
PRINT N'Creating [dbo].[FK_UserRole_User]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [FK_UserRole_User] FOREIGN KEY ([UserID]) REFERENCES [dbo].[User] ([ID]);


GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[DeleteUser] 
	-- Add the parameters for the stored procedure here
	(@UserID uniqueidentifier) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from	
	UPDATE [User] SET IsActive = 0 WHERE ID = @UserID	
	UPDATE [UserRole] SET IsActive = 0 WHERE UserID = @UserID	

END
GO
PRINT N'Creating [dbo].[EditOrganization]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[EditOrganization] 
	-- Add the parameters for the stored procedure here
	(@CustomerID uniqueidentifier,@CustomerName nvarchar(50),@AdminID uniqueidentifier,@RoleID nvarchar(50)) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	DECLARE @ID uniqueidentifier
	SET @ID = NEWID()

	UPDATE [Organization] SET OrganizationName = @CustomerName WHERE Id = @CustomerID
	--UPDATE [UserRole] SET IsPrimary = 0 WHERE OrganizationID = @CustomerID AND IsPrimary = 1	
	--INSERT INTO [UserRole](ID,OrganizationID,RoleID,UserID,IsPrimary) VALUES (@ID,@CustomerID,@RoleID,@AdminID,1 /* IsPrimary */)

END
GO
PRINT N'Creating [dbo].[GetCustomers]...';


GO
CREATE PROCEDURE [dbo].[GetCustomers] 
	-- Add the parameters for the stored procedure here
	(@ParentOrganizationID UNIQUEIDENTIFIER,
	 @OrganizationName nvarchar = NULL,
	 @AccountNumber nvarchar = NULL,
	 @Email nvarchar = NULL,
	 @FullName nvarchar = NULL,
	 @LastLoginDate datetime = NULL,
	 @Offset INT,
	 @PageSize INT,
	 @SortDirection varchar(50),
	 @SortExpression varchar(50),
	 @RowCount INT OUTPUT)
AS
BEGIN

	    SET NOCOUNT ON;

		-- organizations --
SELECT  o.ID, o.OrganizationName, o.OrganizationTypeID, o.AccountNumber, o.IsActive, u.UserName, u.FullName, u.LastLoginDate, u.StatusID INTO #organization
		FROM  [Organization] o 
		inner join [UserOrganization] uo ON uo.OrganizationID = o.ID and uo.IsActive = 1
		inner join [User] u ON u.ID = uo.UserID
		inner join [UserRole] ur ON ur.UserID = u.ID and ur.IsActive = 1

		WHERE o.ParentOrganizationID = @ParentOrganizationID AND o.IsActive=1 AND ur.IsPrimary = 1
		AND @LastLoginDate IS NULL OR u.LastLoginDate = @LastLoginDate
		AND @OrganizationName IS NULL OR o.OrganizationName LIKE '%' +  @OrganizationName + ' %'
		AND @AccountNumber IS NULL OR o.AccountNumber LIKE '%' +  @AccountNumber + ' %'
		AND @Email IS NULL OR u.UserName LIKE '%' +  @Email + ' %'
		AND @FullName IS NULL OR u.FullName LIKE '%' +  @FullName + ' %'
		

SELECT  @RowCount = COUNT(*) 
		From #organization

 
SELECT  * from #organization
 ORDER BY 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END ASC, -- AccountName
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'AccountNumber' THEN AccountNumber END ASC, -- AccountNumber
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'Email' THEN UserName END ASC, -- Email Address
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'FullName' THEN FullName END ASC, -- Admin User
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END ASC, -- Last Login 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'StatusID' THEN StatusID END ASC, -- IsActive

		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END DESC, -- AccountName
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'AccountNumber' THEN AccountNumber END DESC, -- AccountNumber
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'Email' THEN UserName END DESC,-- Email Address
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'FullName' THEN FullName END DESC,-- Admin User
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END DESC,-- Last Login 
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'StatusID' THEN StatusID END DESC-- IsActive
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY


Drop table #organization
END
GO
PRINT N'Creating [dbo].[GetOrganizationByID]...';


GO
CREATE PROCEDURE [dbo].[GetOrganizationByID]
	-- Add the parameters for the stored procedure here
	(@OrganizationID uniqueidentifier)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	 -- Insert statements for procedure here
  

SELECT 

o.ID, o.OrganizationName, o.AccountNumber, o.OrganizationTypeID,  
u.FullName, u.LastLoginDate, u.UserName, u.StatusID
from [Organization] as o
inner join [UserOrganization] uo ON uo.OrganizationID = o.ID and uo.IsActive = 1
inner join [User] u ON u.ID = uo.UserID and u.IsActive = 1
where o.ID = @OrganizationID and u.IsActive=1

END
GO
PRINT N'Creating [dbo].[GetOrganizationByName]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetOrganizationByName]
	-- Add the parameters for the stored procedure here
	(@OrganizationName  nvarchar(250)) 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

SELECT 

o.ID, o.OrganizationName, o.AccountNumber, o.OrganizationTypeID,  
u.FullName, u.LastLoginDate, u.UserName, u.StatusID
from [Organization] as o
inner join [UserOrganization] uo ON uo.OrganizationID = o.ID and uo.IsActive = 1
inner join [User] u ON u.ID = uo.UserID and u.IsActive = 1
where o.OrganizationName = @OrganizationName and u.IsActive=1
END
GO
PRINT N'Creating [dbo].[GetOrganizationsByParentID]...';


GO
CREATE PROCEDURE [dbo].[GetOrganizationsByParentID] 
	-- Add the parameters for the stored procedure here
	(@ParentOrganization UNIQUEIDENTIFIER)
AS
BEGIN

	SET NOCOUNT ON;	

		-- organizations --
	SELECT  org.ID, org.OrganizationName FROM [Organization] org WHERE org.ParentOrganizationID = @ParentOrganization AND org.IsActive = 1
	
END
GO
PRINT N'Creating [dbo].[GetReports]...';


GO
-- =============================================
-- Author:		Vardan
-- Create date: <Create Date,,>
-- Description:	Get list of reports
-- =============================================
CREATE PROCEDURE [dbo].[GetReports]	
	(
	@UserID uniqueidentifier,
	@ReportTypeID int = NULL,
	@Details varchar(50) = NULL,
	@Offset INT, 
	@PageSize INT,
	@SortDirection varchar(50) = 'ASC',
    @SortExpression varchar(50) = 'CreatedDateUtc', 
	@RowCount INT OUTPUT)	
AS
BEGIN

SET NOCOUNT ON;

 SELECT 
 r.ID, r.ReportTypeID, r.CreatedDateUtc, r.Details, r.IsSuccess,
 t.[TicketNumber],
 u.FullName
 INTO #reports
 FROM dbo.Report r 
 INNER JOIN dbo.Ticket t ON r.TicketID = t.ID
 INNER JOIN dbo.[User] u ON u.ID = @UserID
 INNER JOIN dbo.[UserRole] ur ON ur.UserID = u.ID
  INNER JOIN dbo.[UserOrganization] uo ON uo.UserID = u.ID
 INNER JOIN dbo.Organization o ON o.ID = uo.OrganizationID
 WHERE r.UserID = @UserID
 AND @ReportTypeID IS NULL OR r.ReportTypeID = @ReportTypeID
 AND @Details IS NULL OR r.Details LIKE '%' +  @Details + ' %'
 	SELECT   @RowCount = COUNT(*) 
		 From #reports


 
	SELECT * from #reports	
	ORDER BY 		 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'CreatedDateUtc' THEN CreatedDateUtc END ASC,
		 -----------------------------------------------------------------------------------------
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'CreatedDateUtc' THEN CreatedDateUtc END DESC
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY

	Drop table #reports

END
GO
PRINT N'Creating [dbo].[GetTickets]...';


GO
CREATE PROCEDURE [dbo].[GetTickets] 
	-- Add the parameters for the stored procedure here
	(@OrganizationID uniqueidentifier,
	@AccontNumber nvarchar = NULL,
	@AccountName nvarchar = NULL,
	@TicketNumber int = NULL,
	@DeliveryDate datetime = NULL,	
	@Offset INT, 
	@PageSize INT,
	@SortDirection varchar(50) = 'ASC',
    @SortExpression varchar(50) = 'AccountName', 
	@RowCount INT OUTPUT)
	
AS
BEGIN

	    SET NOCOUNT ON;

		-- organizations --
SELECT  org.AccountNumber, org.AccountName, t.TicketNumber, t.DeliveryDate, t.InvoiceNumber INTO #tickets
		FROM  [Ticket] t 
		INNER JOIN  [Organization] org ON org.ID = t.OrganizationID AND org.IsActive = 1
		WHERE t.OrganizationID = @OrganizationID
		AND @DeliveryDate IS NULL OR t.DeliveryDate = @DeliveryDate
		AND @TicketNumber IS NULL OR t.TicketNumber = @TicketNumber
		AND @AccontNumber IS NULL OR org.AccountNumber LIKE '%' +  @AccontNumber + ' %'
		AND @AccountName IS NULL OR org.AccountName LIKE '%' +  @AccountName + ' %'		

SELECT  @RowCount = COUNT(*) 
		From #tickets

		-- organizations --
	

 
SELECT  * from #tickets
 ORDER BY 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'accountName' THEN AccountName END ASC, -- PayerAccount
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'accountNumber' THEN AccountNumber END ASC, -- AccountNumber
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'ticketNumber' THEN TicketNumber END ASC, -- Email Address
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'deliveryDate' THEN DeliveryDate END ASC, -- Admin User
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'invoiceNumber' THEN InvoiceNumber END ASC, -- Last Login 

		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'accountName' THEN AccountName END DESC, -- PayerAccount
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'accountNumber' THEN AccountNumber END DESC, -- AccountNumber
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'ticketNumber' THEN TicketNumber END DESC,-- Email Address
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'deliveryDate' THEN DeliveryDate END DESC,-- Admin User
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'invoiceNumber' THEN InvoiceNumber END DESC-- Last Login 
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY


Drop table #tickets
END
GO
PRINT N'Creating [dbo].[GetUserByID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetUserByID]
	-- Add the parameters for the stored procedure here
	(@UserID uniqueidentifier)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

SELECT 

u.*,  
ur.RoleID, 
r.IsAdmin, r.RoleName, 
o.ID as OrganizationID, o.OrganizationName, o.OrganizationTypeID as OrganizationTypeID 
from [User] as u
inner join [UserRole] ur ON ur.UserID = u.ID and ur.IsActive = 1
inner join [Role] r ON r.ID = ur.RoleID
inner join [UserOrganization] uo ON uo.UserID = u.ID and uo.IsActive = 1
inner join [Organization] o ON o.ID = uo.OrganizationID
where u.ID = @UserID and u.IsActive=1


END
GO
PRINT N'Creating [dbo].[GetUserByUsername]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetUserByUsername]
	-- Add the parameters for the stored procedure here
	(@Username nvarchar(250))
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements .
	SET NOCOUNT ON;

SELECT 

u.*,  
ur.RoleID, 
r.IsAdmin, r.RoleName, 
o.ID as OrganizationID, o.OrganizationName, o.OrganizationTypeID as OrganizationTypeID 
from [User] as u
inner join [UserRole] ur ON ur.UserID = u.ID and ur.IsActive = 1
inner join [Role] r ON r.ID = ur.RoleID
inner join [UserOrganization] uo ON uo.UserID = u.ID and uo.IsActive = 1
inner join [Organization] o ON o.ID = uo.OrganizationID
where u.UserName = @Username and u.IsActive=1


END
GO
PRINT N'Creating [dbo].[GetUsers]...';


GO

-- =============================================
-- Author:		Anushaham Lavash
-- =============================================

CREATE PROCEDURE [dbo].[GetUsers]
	(@OrganizationID uniqueidentifier,
	 @FullName nvarchar = NULL,
	 @UserName nvarchar = NULL,
	 @RoleName nvarchar = NULL,
	 @LastLoginDate datetime = NULL,
	 @Offset INT, 
	 @PageSize INT,
	 @SortDirection varchar(50),
	 @SortExpression varchar(50), 
	 @RowCount INT OUTPUT)
AS
BEGIN
	SET NOCOUNT ON;		 		 

	SELECT  u.ID, u.UserName, u.FullName, u.LastLoginDate, u.StatusID, u.IsActive,
	ur.IsPrimary,
	r.RoleName, r.ID as RoleID, r.IsAdmin, 
	o.OrganizationName, o.ID as OrganizationID, o.OrganizationTypeID as OrganizationTypeID INTO #users

	FROM  [User] as u
		inner join [UserRole] ur ON ur.UserID = u.ID and ur.IsActive = 1
		inner join [Role] r ON r.ID = ur.RoleID
		inner join [UserOrganization] uo ON uo.UserID = u.ID and uo.IsActive = 1
		inner join [Organization] o ON o.ID = uo.OrganizationID
	WHERE uo.OrganizationID = @OrganizationID and u.IsActive=1
		AND @LastLoginDate IS NULL OR u.LastLoginDate = @LastLoginDate
		AND @FullName IS NULL OR u.FullName LIKE '%' +  @FullName + ' %'
		AND @UserName IS NULL OR u.UserName LIKE '%' +  @UserName + ' %'
		AND @RoleName IS NULL OR r.RoleName LIKE '%' +  @RoleName + ' %'

	SELECT   @RowCount = COUNT(*) 
	From #users

	SELECT * from #users 	
	ORDER BY 		 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'User' THEN UserName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'FullName' THEN FullName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'RoleName' THEN RoleName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'StatusID' THEN StatusID END ASC,
		 -----------------------------------------------------------------------------------------
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'User' THEN UserName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'FullName' THEN FullName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'RoleName' THEN RoleName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'StatusID' THEN StatusID END DESC
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY


	Drop table #users
	
END
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
-- =============================================
-- Author:		Vardan Kosakyan
-- Create date: 07.06.16
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[UpdateUser] 
	
	@UserID uniqueidentifier,
	@FullName nvarchar(50),
	@RoleID uniqueidentifier,
	@IsPrimary bit,
	@StatusID int  
AS
BEGIN	
	BEGIN TRAN

	UPDATE dbo.[User] 
	SET FullName = @FullName, 
	StatusID = 
		CASE WHEN @StatusID = 3 OR @StatusID = 1 THEN @StatusID 
			 WHEN @StatusID = 2 THEN 
			(CASE WHEN [PasswordHash] IS NULL OR  [PasswordHash] = '' THEN 1 ELSE 2 END)
		END
	WHERE Id = @userID

	IF @@ROWCOUNT > 0
	BEGIN
		UPDATE dbo.[UserRole]  SET RoleID = @RoleID, IsPrimary = @IsPrimary 
		WHERE UserId = @UserID 	
		COMMIT TRAN
	END ELSE
		ROLLBACK TRAN
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6408b870-4eb6-47d1-aed7-e58625f704e4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6408b870-4eb6-47d1-aed7-e58625f704e4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd0d3abac-d379-4e34-9d66-20137bd4d974')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d0d3abac-d379-4e34-9d66-20137bd4d974')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '30a87109-d79b-46ae-9ff3-6ebb98964e15')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('30a87109-d79b-46ae-9ff3-6ebb98964e15')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dd340e30-2bc7-42f9-889f-5d0e36010cbb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dd340e30-2bc7-42f9-889f-5d0e36010cbb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '21b1b18a-7d54-4cd7-ab9e-454d55b6288c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('21b1b18a-7d54-4cd7-ab9e-454d55b6288c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3837f684-d2df-4564-bf0f-c36cae0ddbaf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3837f684-d2df-4564-bf0f-c36cae0ddbaf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22312a59-9bd2-45d2-af35-f5d7dae6ae70')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22312a59-9bd2-45d2-af35-f5d7dae6ae70')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7c7eedd7-c349-4897-93e0-0e8e7277a9b5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7c7eedd7-c349-4897-93e0-0e8e7277a9b5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aca45870-5ee6-431c-aaa5-869b384d8aa2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aca45870-5ee6-431c-aaa5-869b384d8aa2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '66143f4c-e2f7-4a91-b571-1a5a7a560a4c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('66143f4c-e2f7-4a91-b571-1a5a7a560a4c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e36ff927-0e01-4613-951c-b312beb91b27')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e36ff927-0e01-4613-951c-b312beb91b27')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'db81f4e5-6fb3-49a2-8942-f87442d267b8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('db81f4e5-6fb3-49a2-8942-f87442d267b8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '94b1c5d0-aefb-49cd-be13-8c57e5f3baa2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('94b1c5d0-aefb-49cd-be13-8c57e5f3baa2')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
