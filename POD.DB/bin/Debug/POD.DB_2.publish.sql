/*
Deployment script for POD2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "POD2"
:setvar DefaultFilePrefix "POD2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key ec73344c-d63f-47d3-9d44-2f18b4100040 is skipped, element [dbo].[FK_Report_ToTable] (SqlForeignKeyConstraint) will not be renamed to [FK_Report_User]';


GO
PRINT N'Altering [dbo].[Organization]...';


GO
ALTER TABLE [dbo].[Organization] ALTER COLUMN [AccountName] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Organization] ALTER COLUMN [AccountNumber] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Organization] ALTER COLUMN [OrganizationName] NVARCHAR (250) NOT NULL;


GO
PRINT N'Altering [dbo].[Report]...';


GO
ALTER TABLE [dbo].[Report]
    ADD [OrganizationID] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Altering [dbo].[Ticket]...';


GO
ALTER TABLE [dbo].[Ticket] ALTER COLUMN [HaulierCode] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Ticket] ALTER COLUMN [HaulierReg] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Ticket] ALTER COLUMN [InvoiceNumber] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Ticket] ALTER COLUMN [PayerAccount] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Ticket] ALTER COLUMN [QuoteNumber] NVARCHAR (250) NULL;

ALTER TABLE [dbo].[Ticket] ALTER COLUMN [SerialNumber] NVARCHAR (250) NOT NULL;


GO
PRINT N'Creating [dbo].[FK_Report_Organization]...';


GO
ALTER TABLE [dbo].[Report] WITH NOCHECK
    ADD CONSTRAINT [FK_Report_Organization] FOREIGN KEY ([OrganizationID]) REFERENCES [dbo].[Organization] ([ID]);


GO
PRINT N'Creating [dbo].[FK_Report_User]...';


GO
ALTER TABLE [dbo].[Report] WITH NOCHECK
    ADD CONSTRAINT [FK_Report_User] FOREIGN KEY ([UserID]) REFERENCES [dbo].[User] ([ID]);


GO
PRINT N'Altering [dbo].[GetTickets]...';


GO
ALTER PROCEDURE [dbo].[GetTickets] 
	-- Add the parameters for the stored procedure here
	(@OrganizationID uniqueidentifier,
	@AccontNumber nvarchar(250) = NULL,
	@AccountName nvarchar(250) = NULL,
	@TicketNumber int = NULL,
	@DeliveryDate datetime = NULL,
	@InvoiceNumber nvarchar(250) = NULL,
	@Offset INT, 
	@PageSize INT,
	@SortDirection varchar(50) = 'ASC',
    @SortExpression varchar(50) = 'AccountName', 
	@RowCount INT OUTPUT)
	
AS
BEGIN

	    SET NOCOUNT ON;

		-- organizations --
SELECT  org.AccountNumber, org.AccountName, t.TicketNumber, t.DeliveryDate, t.InvoiceNumber INTO #tickets
		FROM  [Ticket] t 
		INNER JOIN  [Organization] org ON org.ID = t.OrganizationID AND org.IsActive = 1
		WHERE t.OrganizationID = @OrganizationID
		AND (@DeliveryDate IS NULL OR t.DeliveryDate = @DeliveryDate)
		AND (@TicketNumber IS NULL OR t.TicketNumber = @TicketNumber)
		AND (@AccontNumber IS NULL OR org.AccountNumber LIKE CONCAT('%', @AccontNumber, '%'))
		AND (@AccountName IS NULL OR org.AccountName LIKE CONCAT('%',  @AccountName, '%'))
		AND (@InvoiceNumber IS NULL OR t.InvoiceNumber LIKE CONCAT('%',  @InvoiceNumber, '%'))	

SELECT  @RowCount = COUNT(*) 
		From #tickets

		-- organizations --
	

 
SELECT  * from #tickets
 ORDER BY 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'accountName' THEN AccountName END ASC, -- PayerAccount
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'accountNumber' THEN AccountNumber END ASC, -- AccountNumber
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'ticketNumber' THEN TicketNumber END ASC, -- Email Address
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'deliveryDate' THEN DeliveryDate END ASC, -- Admin User
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'invoiceNumber' THEN InvoiceNumber END ASC, -- Last Login 

		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'accountName' THEN AccountName END DESC, -- PayerAccount
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'accountNumber' THEN AccountNumber END DESC, -- AccountNumber
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'ticketNumber' THEN TicketNumber END DESC,-- Email Address
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'deliveryDate' THEN DeliveryDate END DESC,-- Admin User
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'invoiceNumber' THEN InvoiceNumber END DESC-- Last Login 
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY


Drop table #tickets
END
GO
PRINT N'Altering [dbo].[GetUsers]...';


GO

-- =============================================
-- Author:		Anushaham Lavash
-- =============================================

ALTER PROCEDURE [dbo].[GetUsers]
	(@OrganizationID uniqueidentifier,
	 @OrganizationName nvarchar(250) = NULL,
	 @FullName nvarchar(250) = NULL,
	 @UserName nvarchar(250) = NULL,
	 @RoleName nvarchar = NULL,
	 @StatusName nvarchar = NULL,
	 @LastLoginDate datetime = NULL,
	 @Offset INT, 
	 @PageSize INT,
	 @SortDirection varchar(50),
	 @SortExpression varchar(50), 
	 @RowCount INT OUTPUT)
AS
BEGIN
	SET NOCOUNT ON;		 		 

	SELECT  u.ID, u.UserName, u.FullName, u.LastLoginDate, u.StatusID, u.IsActive,
	ur.IsPrimary,
	r.RoleName, r.ID as RoleID, r.IsAdmin, 
	o.OrganizationName, o.ID as OrganizationID, o.OrganizationTypeID as OrganizationTypeID INTO #users

	FROM  [User] as u
		inner join [UserRole] ur ON ur.UserID = u.ID and ur.IsActive = 1
		inner join [Role] r ON r.ID = ur.RoleID
		inner join [UserOrganization] uo ON uo.UserID = u.ID and uo.IsActive = 1
		inner join [Organization] o ON o.ID = uo.OrganizationID
		inner join [AccountStatus] s ON s.StatusID = u.StatusID
	WHERE uo.OrganizationID = @OrganizationID and u.IsActive=1
		AND (@LastLoginDate IS NULL OR u.LastLoginDate = @LastLoginDate)
		AND (@OrganizationName IS NULL OR o.OrganizationName LIKE CONCAT('%', @OrganizationName, '%'))
		AND (@FullName IS NULL OR u.FullName LIKE CONCAT('%', @FullName, '%'))
		AND (@UserName IS NULL OR u.UserName LIKE CONCAT('%', @UserName, '%'))
		AND (@RoleName IS NULL OR r.RoleName LIKE CONCAT('%', @RoleName, '%'))
		AND (@StatusName IS NULL OR s.[Status] LIKE CONCAT('%', @StatusName, '%'))

	SELECT   @RowCount = COUNT(*) 
	From #users

	SELECT * from #users 	
	ORDER BY 		 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'User' THEN UserName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'FullName' THEN FullName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'RoleName' THEN RoleName END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END ASC,
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'StatusDisplayName' THEN StatusID END ASC,
		 -----------------------------------------------------------------------------------------
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'User' THEN UserName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'FullName' THEN FullName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'RoleName' THEN RoleName END DESC,
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'StatusDisplayName' THEN StatusID END DESC
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY


	Drop table #users
	
END
GO
PRINT N'Altering [dbo].[UpdateUser]...';


GO
-- =============================================
-- Author:		Vardan Kosakyan
-- Create date: 07.06.16
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[UpdateUser] 
	
	@UserID uniqueidentifier,
	@FullName nvarchar(50),
	@RoleID uniqueidentifier,
	@IsPrimary bit,
	@StatusID int  
AS
BEGIN	
	BEGIN TRAN

	UPDATE dbo.[User] 
	SET FullName = @FullName, 
	StatusID = 
		CASE WHEN @StatusID = 2 THEN 
			(CASE WHEN [PasswordHash] IS NULL OR  [PasswordHash] = '' THEN 1 ELSE 2 END)
			ELSE @StatusID
		END
	WHERE Id = @userID

	IF @@ROWCOUNT > 0
	BEGIN
		UPDATE dbo.[UserRole]  SET RoleID = @RoleID, IsPrimary = @IsPrimary 
		WHERE UserId = @UserID 	
		COMMIT TRAN
	END ELSE
		ROLLBACK TRAN
END
GO
PRINT N'Creating [dbo].[GetOrganizations]...';


GO
CREATE PROCEDURE [dbo].[GetOrganizations] 
	-- Add the parameters for the stored procedure here
	(@ParentOrganizationID UNIQUEIDENTIFIER,
	 @AccountNumber nvarchar(250) = NULL,
	 @AccountName nvarchar(250) = NULL,
	 @AdminUser nvarchar(250) = NULL,
	 @UserName nvarchar(250) = NULL,
	 @StatusName nvarchar = NULL,
	 @LastLoginDate datetime = NULL,
	 @Offset INT,
	 @PageSize INT,
	 @SortDirection varchar(50),
	 @SortExpression varchar(50),
	 @RowCount INT OUTPUT)
AS
BEGIN

	    SET NOCOUNT ON;

		-- organizations --
SELECT  o.ID, o.OrganizationName, o.OrganizationTypeID, o.AccountNumber, o.IsActive, u.UserName, u.FullName, u.LastLoginDate, u.StatusID INTO #organization
		FROM  [Organization] o 
		inner join [UserOrganization] uo ON uo.OrganizationID = o.ID and uo.IsActive = 1
		inner join [User] u ON u.ID = uo.UserID
		inner join [UserRole] ur ON ur.UserID = u.ID and ur.IsActive = 1
		inner join [AccountStatus] s ON s.StatusID = u.StatusID

		WHERE o.ParentOrganizationID = @ParentOrganizationID AND o.IsActive=1 AND ur.IsPrimary = 1
		AND (@LastLoginDate IS NULL OR u.LastLoginDate = @LastLoginDate)
		AND (@AccountNumber IS NULL OR o.AccountNumber LIKE CONCAT('%', @AccountNumber, '%'))
		AND (@AccountName IS NULL OR o.OrganizationName LIKE CONCAT('%', @AccountName, '%'))
		AND (@AdminUser IS NULL OR u.FullName LIKE CONCAT('%', @AdminUser, '%'))
		AND (@UserName IS NULL OR u.UserName LIKE CONCAT('%', @UserName, '%'))
		AND (@StatusName IS NULL OR s.[Status] LIKE CONCAT('%', @StatusName, '%'))
		

SELECT  @RowCount = COUNT(*) 
		From #organization

 
SELECT  * from #organization
 ORDER BY 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END ASC, -- AccountName
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'AccountNumber' THEN AccountNumber END ASC, -- AccountNumber
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'Email' THEN UserName END ASC, -- Email Address
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'FullName' THEN FullName END ASC, -- Admin User
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END ASC, -- Last Login 
		 CASE WHEN @SortDirection = 'asc' AND @SortExpression = 'StatusDisplayName' THEN StatusID END ASC, -- IsActive

		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'OrganizationName' THEN OrganizationName END DESC, -- AccountName
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'AccountNumber' THEN AccountNumber END DESC, -- AccountNumber
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'Email' THEN UserName END DESC,-- Email Address
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'FullName' THEN FullName END DESC,-- Admin User
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'LastLogin' THEN LastLoginDate END DESC,-- Last Login 
		 CASE WHEN @SortDirection = 'desc' AND @SortExpression = 'StatusDisplayName' THEN StatusID END DESC-- IsActive
		 OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY


Drop table #organization
END
GO
PRINT N'Refreshing [dbo].[EditOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[EditOrganization]';


GO
PRINT N'Refreshing [dbo].[GetOrganizationByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetOrganizationByID]';


GO
PRINT N'Refreshing [dbo].[GetOrganizationByName]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetOrganizationByName]';


GO
PRINT N'Refreshing [dbo].[GetOrganizationsByParentID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetOrganizationsByParentID]';


GO
PRINT N'Refreshing [dbo].[GetReports]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetReports]';


GO
PRINT N'Refreshing [dbo].[GetUserByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetUserByID]';


GO
PRINT N'Refreshing [dbo].[GetUserByUsername]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetUserByUsername]';


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ec73344c-d63f-47d3-9d44-2f18b4100040')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ec73344c-d63f-47d3-9d44-2f18b4100040')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Report] WITH CHECK CHECK CONSTRAINT [FK_Report_Organization];

ALTER TABLE [dbo].[Report] WITH CHECK CHECK CONSTRAINT [FK_Report_User];


GO
PRINT N'Update complete.';


GO
